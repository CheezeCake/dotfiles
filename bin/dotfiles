#!/usr/bin/perl

use strict;
#use diagnostics;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);
use File::Compare;
use File::Basename;

my $home = $ENV{'HOME'};
my $dotfilesdir = "$home/.dotfiles";
my @repofiles = `git --git-dir=$dotfilesdir/.git ls-files`;

#arguments
my $delete;
my $force;
GetOptions('d' => \$delete, 'f' => \$force) or die 'Error in command line arguments';

my @ignorelist;

sub add
{
    chdir $dotfilesdir;

    foreach (@_) {
        my $dir = dirname($_);
        system 'mkdir', '-p', $dir if ($dir ne '');

        system 'cp', '-r', "$home/$_", "$dotfilesdir/$_";
        system 'git', 'add', $_;
        print "add: $_\n";
    }

    system 'git', 'commit', '-am', 'add: '.join(', ', @_);
    system 'git', 'push';
}

sub rm
{
    chdir $dotfilesdir;

    foreach (@_) {
        system 'git', 'rm', '-f', $_;
        system 'rm', '-rf', "$dotfilesdir/$_";
        system 'rm', '-rf', "$home/$_" if ($delete);
    }

    system 'git', 'commit', '-am', 'rm: '.join(', ', @_);
    system 'git', 'push';
}

sub push
{
    chdir $dotfilesdir;

    my $change = 1; # value 1 for force option

    unless ($force) {
        $change = 0;

        foreach (@repofiles) {
            if ($_ ~~ @ignorelist) {
                my $f = $_;
                $f =~ s/(.*)\n/$1/;
                print $f, ' ignored', "\n";
            }
            else {
                chomp;
                my $f = "$home/$_";
                my $repof = "$dotfilesdir/$_";

                if (compare($f, $repof) == 1) {
                    system 'cp', $f, $repof;
                    system 'git', 'commit', '-am', 'update: '.basename($f);
                    $change = 1;
                }
            }
        }
    }

    system 'git', 'push' if ($change);
}

sub pull
{
    chdir $dotfilesdir;

    system 'git', 'pull';
    foreach (@repofiles) {
        if ($_ ~~ @ignorelist) {
            my $f = $_;
            $f =~ s/(.*)\n/$1/;
            print $f, ' ignored', "\n";
        }
        else {
            chomp;
            my $f = "$home/$_";
            my $repof = "$dotfilesdir/$_";

            if (compare($f, $repof) == 1) {
                system 'mv', $f, "$f.old";
                system 'cp', $repof, $f;
                print "$f saved as $f.old\n";
            }
        }
    }
}

sub clean
{
    foreach (@repofiles) {
        chomp;
        my $file = "$home/$_.old";

        if (-e $file) {
            print 'rm ', $file, "\n";
            system 'rm', $file;
        }
    }
}

sub install
{
    foreach (@_) {
        $_ =~ s/^$dotfilesdir\///;
        my $repof = "$dotfilesdir/$_";
        my $f = "$home/$_";

        if (-e $repof) {
            if (not -e $f or $force) {
                system 'cp', $repof, $f;
                print "$f installed\n";
            }
            else {
                print "$f exists. Pass -f to override.\n";
            }
        }
        else {
            print "$_ not found\n";
        }
    }
}


die 'usage: dotfiles [-f] add|clean|install|pull|push|rm [file ...]' if (scalar(@ARGV) == 0);
(-e $home) or die 'can\'t locate homedir (environement variable HOME is not set)';

my $ignorefile = $home.'/.dotfiles.ignore';

if (-e $ignorefile) {
    my $ignorefilehandle;
    open $ignorefilehandle, $ignorefile;
    while (my $line = <$ignorefilehandle>) {
        CORE::push(@ignorelist, $line);
    }
    close $ignorefilehandle;
}

my %cmd_functions = (
    'add' => \&add,
    'clean' => \&clean,
    'install' => \&install,
    'pull' => \&pull,
    'push' => \&push,
    'rm' => \&rm
);
my $cmd = shift;

if (exists $cmd_functions{$cmd}) {
    my $function = $cmd_functions{$cmd};
    &$function(@ARGV);
}
else {
    print $cmd, ': unknown command', "\n";
}
